apiVersion: v1
kind: Namespace
metadata:
  name: mongo

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo-db
  namespace: mongo
spec:
  replicas: 3
  serviceName: "mongo-db-svc"
  selector:
    matchLabels:
      app: mongo-db   
  template: 
    metadata: 
      labels: 
        app: mongo-db
    spec:
      containers:
      - name: mongo
        image: mongo:latest
        command:
          - mongod
          - "--bind_ip_all"
          - "--config=/etc/mongo/mongodb.conf"
        ports:
        - containerPort: 27017
        lifecycle:
          postStart:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  for i in {1..60}; do
                    echo "Waiting for MongoDB to be ready...";
                    if mongosh --host mongo-db-0.mongo-db-svc.mongo.svc.cluster.local --eval "printjson(db.runCommand({ ping: 1 }))"; then
                      mongo --host mongo-db-0.mongo-db-svc.mongo.svc.cluster.local --eval 'rs.initiate({ _id: "rs0", members: [{ _id: 0, host: "mongo-db-0.mongo-db-svc.mongo.svc.cluster.local" }, { _id: 1, host: "mongo-db-1.mongo-db-svc.mongo.svc.cluster.local" }, { _id: 2, host: "mongo-db-2.mongo-db-svc.mongo.svc.cluster.local" }] });'
                      break
                    fi
                    sleep 5
                  done
        volumeMounts:
          - name: mongo-persistent-storage
            mountPath: /data/db
          - name: mongo-config
            mountPath: /etc/mongo  
          - name: mongo-scripts
            mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            cpu: "250m"
            memory: "512Mi"
          limits:
            ephemeral-storage: 1Gi
      volumes:
        - name: mongo-persistent-storage
          persistentVolumeClaim:
            claimName: mongo-pvc
        - name: mongo-scripts
          configMap:
            name: mongo-scripts
        - name: mongo-config
          configMap:
            name: mongo-config     
  volumeClaimTemplates:
  - metadata:
      name: mongo-persistent-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: standard-rwo
      resources:
        requests:
          storage: 2Gi

# StatefulSets are valuable for applications that require one or more of the following.
# Stable, unique network identifiers.
# Stable, persistent storage.
# Ordered, graceful deployment and scaling.
# Ordered, automated rolling updates.
